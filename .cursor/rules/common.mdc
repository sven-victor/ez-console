---
description: 
globs: 
alwaysApply: true
---
## Project Description
This is a backend management system. The backend service is written in Golang, using GORM to interact with the database. It defaults to SQLite but can be configured to use MySQL or PostgreSQL. The frontend is a static site built with React. It includes the following modules:
1.  User Module: Implements basic user management and login/authentication. Supports creating, modifying, deleting, disabling, and activating users. Users can also change or reset their own passwords. User attributes include username, email, full name, password (salted and hashed), phone number (optional), avatar (randomly generated by default), status (enabled, disabled, password expired), roles, and last login time.
2.  Permissions Module: An RBAC-based permissions module.
3.  System Settings Module: Supports configuring minimum password length, password complexity, MFA (via TOTP or email), password expiration time, and automatic disabling of inactive users.
4.  All code comments and returned error messages must be in English.

## HTTP Handling
- Use the Gin framework to handle HTTP requests.
- Use `ShouldBindJSON` for request validation.
- For list query interfaces, request parameters should include at least the following fields:
  - `current`: (int) The page number to query.
  - `page_size`: (int) The number of rows per page.
  - `search`: (string) Keyword for searching.
- The `id` field must be a non-empty string in UUID format.

## HTTP Response Body Examples
- Error messages must be in English.
- Example of a failed/error response format:
```json
{
  "code": "E4012", // Status code
  "err": "Invalid auth token"  // Error message
}
```
- Example of a list response format:
```json
{
  "code": "0", // Status code, 0 means success
  "data": [], // Returned data
  "total": 100, // Total number of rows
  "current": 1, // Current page number
  "page_size": 10 // Number of rows per page
}
```

- Example of a single item response format (no `total`, `current`, `page_size`):
```json
{
  "code": "0", // Status code, 0 means success
  "data": {} // Returned data
}
```